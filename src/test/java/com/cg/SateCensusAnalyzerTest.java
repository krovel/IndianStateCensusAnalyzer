/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.cg;

import java.nio.file.Paths;

import org.junit.Assert;
import org.junit.Test;
import org.junit.rules.ExpectedException;



public class SateCensusAnalyzerTest {
	private static final String STATE_CENSUS_CSV_FILE_PATH = "D:/Capgemini_java_training/IndianStateCensusAnalyzer/StateCensusCSV.csv";
	private static final String WRONG_CSV_FILE_PATH="D:/Capgemini_java_training/IndianStateCensusAnalyzer/src//StateCensusCSV.csv";
	private static final String CSV_FILE_WRONG_DELIMITER_PATH="D:/Capgemini_java_training/IndianStateCensusAnalyzerStateCensusCSVInvalidDelimiter.csv";
	private static final String CSV_FILE_WRONG_HEADER_PATH="D:/Capgemini_java_training/IndianStateCensusAnalyzerStateCensusCSVInvalidHeader.csv";
	@Test
	public void givenStateCensusCSVFile_ShouldReturnNumberOfRecords() {
		try {
			StateCensusAnalyzer censusAnalyzer = new StateCensusAnalyzer(Paths.get(STATE_CENSUS_CSV_FILE_PATH));
			int noOfEntries = censusAnalyzer.readStateCensusCSVData();
			Assert.assertEquals(29, noOfEntries);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test 
	public void givenStateCensusCSVFile_WhenPathIncorrect_ShouldThrowException() {
		try{
			ExpectedException exceptionRule=ExpectedException.none();
			exceptionRule.expect(StateCensusAnalyzerException.class);
			StateCensusAnalyzer censusAnalyzer = new StateCensusAnalyzer(Paths.get(WRONG_CSV_FILE_PATH));
			censusAnalyzer.readStateCensusCSVData();
		}catch(StateCensusAnalyzerException e) {
			Assert.assertEquals(StateCensusAnalyzerException.ExceptionType.INCORRECT_PATH, e.type);
		}
	}
	
	@Test 
	public void givenStateCensusCSVFile_WhenStateIncorrect_ShouldThrowException() {
		try{
			ExpectedException exceptionRule=ExpectedException.none();
			exceptionRule.expect(StateCensusAnalyzerException.class);
			StateCensusAnalyzer censusAnalyzer = new StateCensusAnalyzer(Paths.get(STATE_CENSUS_CSV_FILE_PATH));
			censusAnalyzer.readStateCensusCSVData();
		}catch(StateCensusAnalyzerException e) {			
			Assert.assertEquals(StateCensusAnalyzerException.ExceptionType.INCORRECT_STATE, e.type);
		}
	}
	
	@Test 
	public void givenStateCensusCSVFile_WhenIncorrectDelimeter_ShouldThrowException() {
		try{
			ExpectedException exceptionRule=ExpectedException.none();
			exceptionRule.expect(StateCensusAnalyzerException.class);
			StateCensusAnalyzer censusAnalyzer = new StateCensusAnalyzer(Paths.get(CSV_FILE_WRONG_DELIMITER_PATH));
			censusAnalyzer.readStateCensusCSVData();
		}catch(StateCensusAnalyzerException e) {
			Assert.assertEquals(StateCensusAnalyzerException.ExceptionType.INCORRECT_DELIMITER, e.type);
		}
	}
	@Test 
	public void givenStateCensusCSVFile_WhenIncorrectCSVHeader_ShouldThrowException() {
		try{
			ExpectedException exceptionRule=ExpectedException.none();
			exceptionRule.expect(StateCensusAnalyzerException.class);
			StateCensusAnalyzer censusAnalyzer = new StateCensusAnalyzer(Paths.get(CSV_FILE_WRONG_HEADER_PATH));
			censusAnalyzer.readStateCensusCSVData();
		}catch(StateCensusAnalyzerException e) {
			Assert.assertEquals(StateCensusAnalyzerException.ExceptionType.INCORRECT_CSV_HEADER, e.type);
		}
	}
}